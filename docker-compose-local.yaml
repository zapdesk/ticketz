networks:
  ticketz:

volumes:
  postgres_data:
  redis_data:
  backend_public:
  backend_private:

services:

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    volumes:
      - backend_public:/usr/src/app/public
      - backend_private:/usr/src/app/private
    env_file:
      - .env-backend-local
    restart: always
    depends_on:
      - postgres
      - redis
    ports:
      - ${BACKEND_PORT:-8080}:3000
    networks:
      - ticketz

  frontend:
    ports:
      - ${FRONTEND_PORT:-3000}:80
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    env_file:
      - .env-frontend-local
    volumes:
      - backend_public:/var/www/backend-public
    restart: always
    depends_on:
      - backend
    networks:
      - ticketz

  postgres:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-ticketz}
      - POSTGRES_DB=${POSTGRES_DB:-ticketz}
      - POSTGRES_HOST_AUTH_METHOD=trust
      - TZ=${TZ:-America/Sao_Paulo}
    expose:
      - 5432
    restart: always
    networks:
      - ticketz

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    expose:
      - 6379
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - ticketz


